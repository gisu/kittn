// ===================================================
// SassyLists
// 
// Is a shorter Version from Hugo Giraudels Library 
//
// @link https://github.com/Team-Sass/SassyLists
// ===================================================

// Tests whether `$list` has at least 2 values.
//
// @ignore Documentation: http://sassylists.com/documentation.html#sl-has-multiple-values
//
// @param {List} $list - list to run test against
//
// @example 
// sl-has-multiple-values(a)
// // false
//
// @example 
// sl-has-multiple-values(a b)
// // true
// 
// @return {Bool}
@function sl-has-multiple-values($list) {
  @return length($list) > 1;
}

// Compares `$a` and `$b` based on `$order`.
//
// @access private
//
// @param {*}       $a      - first value
// @param {*}       $b      - second value
// @param {List}    $matrix - alphabetical order
//
// @return {Bool}
@function sl-str-compare($a, $b, $order) {
  @if type-of($a) == "number" and type-of($b) == "number" {
    @return $a < $b;
  }

  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));
  
  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);
    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }
  
  @return str-length($a) < str-length($b);
}

// Casts `$value` into a list.
//
// @ignore Documentation: http://sassylists.com/documentation.html#sl-to-list
//
// @param {*} $value - value to cast to list
// @param {String} $separator (space) - separator to use
//
// @example
// sl-to-list(a b c, comma)
// // a, b, c
// 
// @return {List}
@function sl-to-list($value, $separator: list-separator($value)) {
  @return join((), $value, $separator);
}

// @requires sl-to-list
// @alias sl-to-list
@function sl-listify($value) {
  @return sl-to-list($value);
}


// Reverses the order of `$list`.
//
// @ignore Documentation: http://sassylists.com/documentation.html#sl-reverse
//
// @param {List} $list - list to reverse
//
// @requires sl-to-list
//
// @example
// sl-reverse(a b c)
// // c b a
// 
// @return {List}
@function sl-reverse($list) {
  @if sl-missing-dependencies(sl-to-list) == true { @return null; }

  $length: length($list);
  $end: floor($length / 2);

  @if $length < 2 {
    @return $list;
  }

  @for $i from 1 through $end {
    $tmp: nth($list, $i);
    $list: set-nth($list, $i, nth($list, -$i));
    $list: set-nth($list, -$i, $tmp);
  }

  @return sl-to-list($list);
}

// @requires sl-reverse
// @alias sl-reverse
@function sl-mirror($list) {
  @return sl-reverse($list);
}

// Removes duplicate values from `$list`.
//
// @ignore Documentation: http://sassylists.com/documentation.html#sl-remove-duplicates
//
// @param {List} $list - list to remove duplicates from
//
// @requires sl-to-list
//
// @example
// sl-remove-duplicates(a b a b)
// // a b
//
// @return {List}
@function sl-remove-duplicates($list) {
  @if sl-missing-dependencies(sl-to-list) == true { @return null; }

  $result: ();

  @each $item in $list {
    @if not index($result, $item) {
      $result: append($result, $item, list-separator($list));
    }
  }

  @return sl-to-list($result);
}

// @requires sl-remove-duplicates
// @alias sl-remove-duplicates
@function sl-unique($list) {
  @return sl-remove-duplicates($list);
}


// Sorts values of `$list` using quick-sort algorithm using `$order`.
//
// @ignore Documentation: http://sassylists.com/documentation.html#sl-sort
//
// @requires sl-str-compare
// @requires sl-has-multiple-values
// @requires sl-to-list
//
// @param {List} $list  - list to sort
// @param {List} $order - order to respect
//
// @example
// sl-sort(b a c)
// // a b c
//
// @example
// sl-sort(3 5 1)
// // 1 3 5 
//
// @return {List}
@function sl-sort($list, $order: "!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "\\" "]" "^" "_" "{" "|" "}" "~" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z") {
  @if sl-missing-dependencies(sl-str-compare, sl-has-multiple-values, sl-to-list) == true { @return null; }

  $less:  ();
  $equal: ();
  $large: ();

  @if sl-has-multiple-values($list) {
    $seed: nth($list, ceil(length($list) / 2));
    
    @each $item in $list {
      @if $item == $seed {
        $equal: append($equal, $item, list-separator($list));
      }

      @else if sl-str-compare($item, $seed, $order) {
        $less: append($less, $item, list-separator($list));
      }
      
      @else if not sl-str-compare($item, $seed, $order) {
        $large: append($large, $item, list-separator($list));
      }
    }

    @return join(join(sl-sort($less, $order), $equal), sl-sort($large, $order));
  }

  @return sl-to-list($list);
}


// @requires sl-sort
// @alias sl-sort
@function sl-order($list) {
  @return sl-sort($list);
}