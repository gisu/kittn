// ===================================================
// Various Helper
// ===================================================

// Strip Units
@function strip-units($number) {
  @if type-of($number) != number {
    @warn "#{$number} is not a number for `strip-unit`.";
    @return false;
  } @else {
    @if unitless($number) {
      @return $number;
    } @else {
      @return $number / ($number * 0 + 1);
    }
  }
}

// Unit Checker
@function unit-check($value) {
  @if unitless($value) {
    @if $default-unit == rem {
      @return $value + 0rem;
    } @else if $default-unit == em {
      @return $value + 0em;
    } @else {
      @return $value + 0px;
    }
  } @else {
    @return $value;
  }
}


// Mixin: calc
// Shorthand for the CSS3 Calc function
//
// @mixin     calc
// @param     $property {string} The Property that calculated
// @param     $expression {string} The Formula
// @usage     +calc($property,$expression)
// @eg        +calc(width, '100% / 2 - 2 * 3 px')
// @mixin calc($property, $expression) {
//   #{$property}: -moz-calc(#{$expression});
//   #{$property}: -o-calc(#{$expression});
//   #{$property}: -webkit-calc(#{$expression});
//   #{$property}: calc(#{$expression});
// }

/**
 * Clamp a Number between a min and max values,
 * Perfect for percentage
 *
 * @param   {Number} $value - The Value that need to be clamped
 * @param   {Number} $min   - The posible minimal value
 * @param   {Number} $max   - The possible max Value
 *
 * @returns {Number}        - Clamped Value
 */
@function clamp($value, $min, $max) {
  @return if($value > $max, $max, if($value < $min, $min, $value));
}

// Component Extend
// http://hugogiraudel.com/2014/05/05/bringing-configuration-objects-to-sass/
@function comp-extend($obj, $ext-obj) {
  @return map-merge($obj, $ext-obj);
}

// Function: cp
// Pick the Color Values from the Color Map
//
// @function   cp
// @param      $target {string} The desired color
// @param      $map {string} The Color Map
// @return     {string} Color Value
// @usage:     @include cp($target);
@function cp($target, $map: $stylecolors) {
  @if map-has-key($map,$target) {
    @return map-get(map-get($map,$target),color);
  } @else {
    @warn "Color is not available";
  }
}

@function s($lines,$hard: false, $size: $spacing) {
  @if type-of($lines) == 'number' {
    @if $hard != false {
      @return strip-units($lines) * $size !important;
    } @else {
      @return strip-units($lines) * $size;
    }
  }
}
@function spacer($lines,$hard: false, $size: $spacing) {
  @if type-of($lines) == 'number' {
    @return strip-units($lines) * $size + 0px if($hard,!important,null);
  }
}
