// ============================================================
//          Spacer
// -----------------------------------------------------------

// Mixin: _margin-padding
// Private Mixin for build easy margin and paddings
//
// ------
// @variable:
//    $options [data-map]
//    - value [bool|list]
//      => It generate all four sides, with different length of values.
//      => Per Default uses 'px', but other units can be also used
//    - type [value]
//      => Margin or Padding Type
//      => values: margin | padding (default)
//    - important [bool]
//      => When the Values need hard overwritten.
//      => Otherwise set it to 'false', the parent Classname will be used as base name
// ------
// @usage:
//    .box {
//      @include _margin-padding((
//        value: 10 20em
//      ));
//    }
@mixin _margin-padding($options) {
  // Setup Default var
  $options: map-merge((
    value: false,
    type: padding,
    important: false
  ),$options);

  $dir: top right bottom left;
  $v: map-get($options,value);
  $l: null;
  $c: null;
  $cl: null;

  // Check type
  @if map-get($options,type) == padding OR map-get($options,type) == margin {
    // Check if Value is filled
    @if map-get($options, value) != false {
      // Check Length
      @if length(map-get($options, value)) > 4 {
        @warn 'Too many Values, please reduce to max 4.';
      } @else {
        $l: length($v);

        // Set the Trigger List
        @if $l == 4 {
          $cl: 1 2 3 4;
        } @else if $l == 3 {
          $cl: 1 2 1 2;
        } @else if $l == 2 {
          $cl: 1 2 1 2;
        } @else {
          $cl: 1 1 1 1;
        }

        // Recalculate
        @for $i from 1 through 4 {
          $c: nth($cl,$i);

          #{map-get($options,type)}-#{nth($dir,$i)}: if(unitless(nth($v,$c)),nth($v,$c) + 0px, nth($v,$c)) if(map-get($options,important) == true, !important, null);
        }
      }
    } @else {
      @warn 'Please insert a value for margin or padding.';
    }
  } @else {
    @warn 'Type "#{map-get($options,type)}" is not possible. Use "padding" or "margin".';
  }
}

// Mixin: padding
// Generate Paddings for all four sides off a box.
//
// ------
// @variable:
//    $value [list]
//      -> It generate all four sides, with different length of values.
//      -> Per Default uses 'px', but other units can be also used
//    $important [bool]
//      -> When the Values need hard overwritten.
//      -> Otherwise set it to 'false', the parent Classname will be used as base name
// ------
// @usage:
//    .box {
//      @include padding(10 30 4rem 5%);
//    }
// @result:
//    .box {
//      padding-top: 10px;
//      padding-right: 30px;
//      padding-bottom: 4rem;
//      padding-left: 5%;
//    }
@mixin padding($value: null, $important: false) {
  @include _margin-padding((
    value: $value,
    type: padding,
    important: $important
  ));
}

// Mixin: margin
// Generate Margins for all four sides off a box.
//
// ------
// @variable:
//    $value [list]
//      -> It generate all four sides, with different length of values.
//      -> Per Default uses 'px', but other units can be also used
//    $important [bool]
//      -> When the Values need hard overwritten.
//      -> Otherwise set it to 'false', the parent Classname will be used as base name
// ------
// @usage:
//    .box {
//      @include margin(10);
//    }
// @result:
//    .box {
//      margin-top: 10px;
//      margin-right: 10px;
//      margin-bottom: 10px;
//      margin-left: 10px;
//    }
@mixin margin($value: null, $important: false) {
  @include _margin-padding((
    value: $value,
    type: margin,
    important: $important
  ));
}

// Mixin: spacer
// Generate Spacing with stepped units
//
// ------
// @variable:
//    $lines [number]
//      -> The Steps for the Calculation
//    $options [value]
//      -> The Spacing Type
//      -> values: w = width, h = height, lh = line-height, pt = padding-top
//                 pb = padding-bottom, pl = padding-left, pr = padding-right
//                 mt = margin-top, mb = margin-bottom, ml = margin-left
//                 mr = margin-right
//    $size [number]
//      -> The Basesize (default : $spacing)
//    $important [bool]
//      -> Overwrite Values with !important
// ------
// @usage:
//    .box {
//      @include spacer(4, pl);
//    }
// @result:
//    .box {
//      padding-left: 80px;
//    }
@mixin spacer($lines: 1, $option: null, $size: $spacing, $important: false) {

  // Option Setup
  $spacer-options: (
    w: width,
    h: height,
    lh: line-height,
    pt: padding-top,
    pb: padding-bottom,
    pl: padding-left,
    pr: padding-right,
    mt: margin-top,
    mb: margin-bottom,
    ml: margin-left,
    mr: margin-right
  );

  @if map-has-key($spacer-options,$option) {
    #{map-get($spacer-options,$option)}: strip-units($lines) * if(unitless($size), $size + 0px, $size) if($important == true, !important, null);
  } @else {
    @warn 'The Option "#{$option}" is not available.';
  }
}

// Mixin: spacer-reset
// Generate the Grid Height
//
// @mixin     spacer-reset
// @param     $option [value] The Attribute - h (height), lh (lineheight), pt (padding-top), pb (padding-bottom), pl (padding-left), pr (padding-right), mt (margin-top), mb (margin-bottom), ml (margin-left), mr (margin-right)
// @param     $hard [boolean] Overwrite Values with !important
// @usage:    +spacer-reset($option: mb, $name: none, $hard: false)

// Mixin: spacer-reset
// Reset the Spacer generated sizes
//
// ------
// @variable:
//    $options [value]
//      -> The Spacing Type
//      -> values: w = width, h = height, lh = line-height, pt = padding-top
//                 pb = padding-bottom, pl = padding-left, pr = padding-right
//                 mt = margin-top, mb = margin-bottom, ml = margin-left
//                 mr = margin-right
//    $important [bool]
//      -> Overwrite Values with !important
// ------
// @usage:
//    .box {
//      @include spacer-reset(pl);
//    }
// @result:
//    .box {
//      padding-left: inherit;
//    }
@mixin spacer-reset($option: null, $important: false) {

  // Option Setup
  $spacer-options: (
    w: width,
    h: height,
    lh: line-height,
    pt: padding-top,
    pb: padding-bottom,
    pl: padding-left,
    pr: padding-right,
    mt: margin-top,
    mb: margin-bottom,
    ml: margin-left,
    mr: margin-right
  );

  @if map-has-key($spacer-options,$option) {
    #{map-get($spacer-options,$option)}: inherit if($important == true, !important, null);
  } @else {
    @warn 'The Option "#{$option}" is not available.';
  }
}
