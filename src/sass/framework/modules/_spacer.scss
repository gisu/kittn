// ===================================================
// Spacer
// ===================================================

// Spacer Option Map
$spacer-options: (
  w: width,
  h: height,
  lh: line-height,
  pt: padding-top,
  pb: padding-bottom,
  pl: padding-left,
  pr: padding-right,
  mt: margin-top,
  mb: margin-bottom,
  ml: margin-left,
  mr: margin-right
) !global;

/**
 * Private Mixin for build easy margin and paddings
 *
 * @access private
 *
 * @param {map}  $options - Settings
 *                          :value {Bool|List} (false) - It generate all four sides, with different length of values.
 *                          :type {*} (padding) - Margin or Padding Type
 *                          :important {Bool} (false) - When the Values need hard overwritten. Otherwise set it to 'false', the parent Classname will be used as base name
 *
 * @example
 *   .box {
 *     @include _margin-padding((
 *       value: 10 20em
 *     ));
 *   }
 */
@mixin _margin-padding($options) {
  // Setup Default var
  $options: map-merge((
    value: false,
    type: padding,
    important: false
  ),$options);

  $dir: top right bottom left;
  $v: map-get($options,value);
  $l: null;
  $c: null;
  $cl: null;

  // Check type
  @if map-get($options,type) == padding OR map-get($options,type) == margin {

    // Check if Value is filled
    @if map-get($options, value) != false {

      // Check Length
      @if length(map-get($options, value)) > 4 {
        @warn 'Too many Values, please reduce to max 4.';

      } @else {

        $l: length($v);

        // Set the Sides
        @if $l == 4 {
          $cl: 1 2 3 4;

        } @else if $l == 3 {
          $cl: 1 2 1 2;

        } @else if $l == 2 {
          $cl: 1 2 1 2;

        } @else {
          $cl: 1 1 1 1;
        }

        // Recalculate
        @for $i from 1 through 4 {
          $c: nth($cl,$i);

          #{map-get($options,type)}-#{nth($dir,$i)}: if(unitless(nth($v,$c)),nth($v,$c) + 0px, nth($v,$c)) if(map-get($options,important) == true, !important, null);
        }
      }
    } @else {
      @warn 'Please insert a value for margin or padding.';
    }

  } @else {
    @warn 'Type "#{map-get($options,type)}" is not possible. Use "padding" or "margin".';
  }
}

/**
 * Generate Paddings for all four sides off a box.
 *
 * @param {map}  $options - Settings
 *                          :value {Bool|List} (false) - It generate all four sides, with different length of values.
 *                          :important {Bool} (false) - When the Values need hard overwritten. Otherwise set it to 'false', the parent Classname will be used as base name
 *
 * @example
 *   .box {
 *     @include padding(10 30 4rem 5%);
 *   }
 */
@mixin padding($value: null, $important: false) {
  @include _margin-padding((
    value: $value,
    type: padding,
    important: $important
  ));
}

/**
 * Generate Margins for all four sides off a box.
 *
 * @param {map}  $options - Settings
 *                          :value {Bool|List} (false) - It generate all four sides, with different length of values.
 *                          :important {Bool} (false) - When the Values need hard overwritten. Otherwise set it to 'false', the parent Classname will be used as base name
 *
 * @example
 *   .box {
 *     @include margin(10 30 4rem 5%);
 *   }
 */
@mixin margin($value: null, $important: false) {
  @include _margin-padding((
    value: $value,
    type: margin,
    important: $important
  ));
}

/**
 * Generate Spacing based on the Global Spacing
 *
 * @param {List}    $options           - Spacing Type
 *                                       values: w = width, h = height, lh = line-height, pt = padding-top
 *                                       pb = padding-bottom, pl = padding-left, pr = padding-right
 *                                       mt = margin-top, mb = margin-bottom, ml = margin-left
 *                                       mr = margin-right
 * @param {Number}  $lines (1)         - Spacing Multiplicator
 * @param {Bool}    $important (false) - Overwrite Values with !important
 * @param {Number}  $size ($kittn-global-spacing)   - Global Size Value
 */
@mixin spacer($options, $lines: 1, $important: false, $size: $kittn-global-spacing) {

  // Remove Duplicates
  $o: sl-remove-duplicates($options);

  @for $i from 1 through length($o) {

    // Move the Pointer to the List Entry
    $option: nth($o, $i);

    // Check if the Key is Available in the List
    @if map-has-key($spacer-options,$option) {
      #{map-get($spacer-options,$option)}: strip-units($lines) * if(unitless($size), $size + 0px, $size) if($important == true, !important, null);
    } @else {
      @warn 'The Option "#{$option}" is not available.';
    }
  }
}

/**
 * Reset Spacing
 *
 * @param {List}    $options           - Spacing Type
 *                                       values: w = width, h = height, lh = line-height, pt = padding-top
 *                                       pb = padding-bottom, pl = padding-left, pr = padding-right
 *                                       mt = margin-top, mb = margin-bottom, ml = margin-left
 *                                       mr = margin-right
 * @param {Bool}    $important (false) - Overwrite Values with !important
 */
@mixin spacer-reset($options, $important: false) {
  // Remove Duplicates
  $o: sl-remove-duplicates($options);

  @for $i from 1 through length($o) {

    // Move the Pointer to the List Entry
    $option: nth($o, $i);

    // Check if the Key is Available in the List
    @if map-has-key($spacer-options,$option) {
      #{map-get($spacer-options,$option)}: inherit if($important == true, !important, null);
    } @else {
      @warn 'The Option "#{$option}" is not available.';
    }
  }
}
