// ===================================================
// Typography
// ===================================================

/**
 * Walks trough the Typo Map and get the Values
 *
 * @param   {*} $entry     - Key
 * @param   {*} $attribute - Attribute to get
 *
 * @returns {*}
 */
@function tw($entry, $attribute) {
  @if map-has-key($fontstyles,$entry) {
    @return map-get(map-get($fontstyles,$entry),$attribute);

  } @else {
    @warn 'The Fontstyle "#{$entry}" is not available in your Fontstyle Map! Please add the additional style to the map or use a existing style.';
  }
}

/**
 * Generate the Typo based on the Typo-Map
 */
@mixin typogenerator {
  @each $style, $entry in $fontstyles {
    $selector: null;

    @if map-get($entry,tag) != false {
      $selector: '.#{$style},#{$style}';

    } @else {
      $selector: '.#{$style}';
    }

    #{$selector} {
      @if map-get($entry,extend) != false { @extend #{map-get($entry,extend)} }

      @include fontsize(map-get($entry,font-size));

      @if map-get($entry,line-height) != false {
        @if map-get($entry,line-height) == d {
          line-height: 1;

        } @else if map-get($entry,line-height) == c {
          @include lineheight((map-get($entry,font-size) * 1.24 ));

        } @else {
          @include lineheight(map-get($entry,line-height));
        }
      }

      @if map-get($entry,margin-bottom) != n {
        @include marginbottom(map-get($entry,margin-bottom));
      }

      @if map-get($entry,font-weight) != n {
        font-weight: map-get($entry,font-weight);
      }
    }

  }
}

/**
 * Generate Responsive Fonts, based on the Breakpoint Map
 *
 * @param {number} $base - The Base Font Size in percent
 */
@mixin responsive-fontsize($base) {
  $list: ();

  // Move Values in a list
  @each $name, $entry in $breakpoints {
    @if map-get($entry, fontsize) != false {
      $list: append($list, (map-get($entry,size) map-get($entry, fontsize)), comma);
    }
  }

  // // Clean up Duplicates
  $list: remove-duplicates($list);

  // Sort the List
  @if $mobile-first != true {
    $list: reverse($list);
  }

  font-size: strip-units($base) + 0%;
  // Build the Stepped Width
  @for $i from 1 through length($list) {
    $l: nth($list,$i);
    @media screen and (if($mobile-first,min-width,max-width): nth($l,1)) {
      font-size: nth($l,2) + 0%;
    }
  }
}

/**
 * Include a Fontsize from the Fontstyle Map
 *
 * @param   {*} $entry     - Key
 */
@mixin get-fontsize($entry) {
  @include fontsize(tw($entry,font-size));
}
