// ===================================================
// Color Helper
// ===================================================

// Mixin: _color
// Private Mixin to get Color Values from the Color Map
//
// ------
// @variable:
//    $target [list]
//      -> The required Value from the map
//    $attrib [value]
//      -> Required Attribute
//    $entrys [map]
//      -> Connection to the Color Map
@mixin _color($target, $attrib: color, $map: $stylecolors ) {
  @if map-has-key($map,$target) {
    $colors : map-get($map,$target);

    @if map-get($colors,opacity) != false {
      @include jacket(old) {
        #{$attrib}: map-get($colors,color);
      }
      @include jacket(modern) {
        #{$attrib}: rgba(map-get($colors,color),map-get($colors,opacity));
      }

    } @else {
      #{$attrib}: map-get($colors,color);
    }

  } @else {
    @warn 'The Color "#{$target}" are not available in the Color Map! Please add it to the map or use a existing color.';
  }
}

// Get the Color from the Map and generate color values

// Mixin: get-c
// Pick the Color from the map and include it as text color
//
// ------
// @variable:
//    $target [list]
//      -> he required Value from the map
// ------
// @usage:
//     .block {
//       @include get-c(primary);
//     }
// @result:
//    .block {
//      color: #6ad2ef;
//    }
@mixin get-c($target) {
  @include _color($target, $attrib: color);
}
// ALIAS LONGER
@mixin color($target, $hard: false) {
  @include _color($target, $attrib: color, $imp: $hard);
}


// Mixin: get-bgc
// Pick the Color from the map and include it as background-color
//
// ------
// @variable:
//    $target [list]
//      -> he required Value from the map
// ------
// @usage:
//     .block {
//       @include get-bgc(primary);
//     }
// @result:
//    .block {
//      background-color: #6ad2ef;
//    }
// Get the Color from the Map and generate background-color values
@mixin get-bgc($target) {
  @include _color($target, $attrib: background-color);
}

// ALIAS LONGER
@mixin background-color($target, $hard: false) {
  @include _color($target, $attrib: background-color, $imp: $hard);
}

// Mixin: colorgenerator
// Generate Color Classes based on your Color Map
//
// ------
// @variable:
//    $colors [map]
//      -> Connection to the Color Map
// ------
// @usage:
//    @include colorgenerator();
@mixin colorgenerator($colors: $stylecolors) {
  @each $value, $entry in $colors {

    // Set the Prefix
    $prefix: '';

    @if $gen-color-type == class {
      $prefix: '.';
    } @else {
      $prefix: '%';
    }

    // Set Class for Text Color
    @if map-get($entry,type) == t {
      #{$prefix}tc-#{$value} {
        @include _color($value,color);
      }
    }

    // Set Class for Background-Color
    @if map-get($entry,type) == b {
      #{$prefix}bc-#{$value} {
        @include _color($value,background-color);
      }
    }

    // Set two Classes for Text & Background-Color
    @if map-get($entry,type) == bt {
      #{$prefix}tc-#{$value} {
        @include _color($value,color);
      }
      #{$prefix}bc-#{$value} {
        @include _color($value,background-color);
      }
    }
  }
}


@mixin ext-tc($name) {
  $prefix: '';

    @if $gen-color-type == class {
      $prefix: '.';
    } @else {
      $prefix: '%';
    }

  @extend #{$prefix}tc#{$mark-bem-modifier}#{$name};
}
@mixin ext-bc($name) {
  $prefix: '';

    @if $gen-color-type == class {
      $prefix: '.';
    } @else {
      $prefix: '%';
    }
  @extend #{$prefix}bc#{$mark-bem-modifier}#{$name};
}
