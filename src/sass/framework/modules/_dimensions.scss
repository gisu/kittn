// ============================================================
//          Dimensions
// ------------------------------------------------------------

// Mixin: size
// Shorthand for insert Dimensions. Default in PX, opt in Percent
// Entering only one Value the Dimension Squared, with two Values
// the width and height are written.
//
// @mixin     size
// @param     $size {number} Width and or Height
// @usage     @include size($size, $value);
// @eg        @include size(200 100);
@mixin size($size) {
  @if length($size) <= 2 {
    @if length($size) == 2 {
      width: if(unitless(nth($size,1)),nth($size,1) + 0px, nth($size,1));
      height: if(unitless(nth($size,2)),nth($size,2) + 0px, nth($size,2));
    }

    @if length($size) == 1 {
      width: if(unitless($size),$size + 0px, $size);
      height: if(unitless($size),$size + 0px, $size);
    }
  } @else {
    @warn 'Too many Size Values. Maximum two values';
  }
}

// Mixin: align-height
// Shorthand to Align Height with Lineheight
//
// @mixin     align-height
// @param     $height {value} Heightsize
// @param     $factor {number} Multiplicator for Lineheight (default: 1)
// @usage     +align-height($height,$factor)
// @eg        +align-height(20px)
@mixin align-height($height,$factor: 1) {
  $line-height: $height * $factor;
  $height: $height;

  @if unitless($height) {
    $height: $height + 0px;
    $line-height: $line-height + 0px;
  }

  height: $height;
  line-height: $line-height;
}

// Mixin: central
// Center and Middle a Element in a box
// Entering only one Value the Dimension Squared, with two Values
// the width and height are written.
//
// @mixin     central
// @param     $size {number} Width and or Height
// @usage     +central($size)
// @eg        +central(200 100)
@mixin central($size) {
  @if length($size) == 2 {
    $width: nth($size,1);
    $height: nth($size,2);

    @include size($width $height);

    @if unitless($height) {
      $height: $height + 0px;
    }

    line-height: $height;
    text-align: center;
  }
  @if length($size) == 1 {
    $width: $size;
    $height: $size;

    @include size($size);

    @if unitless($height) {
      $height: $height + 0px;
    }

    line-height: $height;
    text-align: center;
  }
}

// Mixin: central-transfowm
// Center and Middle a Element absolute with transform trick
//
// @mixin     central-transform
// @param     $vert {bool} Vertical Option (:default = true)
// @param     $horz {bool} Horizontal Option (:default = true)
// ----
// @usage:
//    .box {
//      @include central-transform();
//    }
//
// @result:
//    .box {
//      position: absolute;
//      top: 50%;
//      left: 50%;
//      -webkit-transform: translate(-50%, -50%);
//      -ms-transform: translate(-50%, -50%);
//      transform: translate(-50%, -50%);
//    }
// **
@mixin central-transform($vert: true, $horz: true) {
  position: absolute;

  @if $vert and $horz {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else {
    @if $vert {
      top: 50%;
      transform: translate(-50%, 0);
    }
    @if $horz {
      left: 50%;
      transform: translate(0, -50%);
    }
  }
}

// Mixin: align-fontsize
// Shorthand to Align Fontsize with Lineheight
//
// @mixin     align-fontsize
// @param     $size {value} Fontsize
// @param     $factor {number} Multiplicator for Lineheight (default: 1)
// @usage     +align-fontsize($size,$factor)
// @eg        +align-fontsize(14px)
@mixin align-fontsize($size,$factor: 1) {
  $line-height: $size * $factor;
  $size: $size;

  @if unitless($size) {
    $size: $size + 0px;
    $line-height: $line-height + 0px;
  }

  font-size   : $size;
  line-height : $line-height;
}

// Mixin: calc
// Shorthand for the CSS3 Calc function
//
// @mixin     calc
// @param     $property {string} The Property that calculated
// @param     $expression {string} The Formula
// @usage     +calc($property,$expression)
// @eg        +calc(width, '100% / 2 - 2 * 3 px')
// @mixin calc($property, $expression) {
//   #{$property}: -moz-calc(#{$expression});
//   #{$property}: -o-calc(#{$expression});
//   #{$property}: -webkit-calc(#{$expression});
//   #{$property}: calc(#{$expression});
// }

// Mixin: circle
// Shorthand for a perfect circle
//
// @mixin     circle
// @param     $size {value} The Size of the Circle
// @usage     +circle($size)
@mixin circle($size) {
  @if unitless($size) {
    $size: $size + 0px;
  }
  border-radius: $size * 2;
}

// Mixin: circle-align
// Shorthand for a perfect circle that align elements in the middle
//
// @mixin     circle-align
// @param     $size {value} The Size of the Circle
// @usage     +circle-align($size)
@mixin circle-align($size) {
  @include central($size);
  @include circle($size);

}

// Mixin: ratio
// A Floating Grid System
//
// @mixin     ratio
// @param     $ratio {list} The Ratio between width and height [:default = false]
// @param     $selector {string} Target selector [:default = false]
// @usage:    +ratio($ratio: 1 1, $selector: false)
//          ...
@mixin ratio($ratio: 1 1, $selector: false) {
  $sel: null;

  overflow: hidden;
  position: relative;

  &:before {
    content: '';
    display: block;
    height: 0;
    padding-top: (nth($ratio,2) / nth($ratio,1)) * 100%;
  }

  @if $selector != false {
    $sel: '& > #{$selector}';
  } @else {
    $sel: '& > *';
  }

  #{$sel} {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
    @content;
  }
}

@mixin ratio-break($selector: false) {
  $sel: null;

  &:before {
    height: auto;
    padding-top: 0;
  }

  @if $selector != false {
    $sel: '& > #{$selector}';
  } @else {
    $sel: '& > *';
  }

  #{$sel} {
    position: inherit;
    left: inherit;
    top: inherit;
    height: inherit;
    width: inherit;
    @content;
  }
}

// Mixin: middle
// Middle the inner Element
//
// @mixin     middle
// @usage:    +middle
@mixin middle {
  &:before {
    content: '';
    display: inline-block;
    height: 100%;
    vertical-align: middle;
  }

  > * {
    display: inline-block;
    vertical-align: middle;
  }
}

// @mixin middle {
//   &:before {
//     content: '';
//     display: inline-block;
//     vertical-align: middle;
//     height: 100%;
//     width: .1px;
//   }
// }
