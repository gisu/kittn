// ===================================================
// Grid
// ===================================================

/**
 * Calculate the Size in Percent
 *
 * @param  {Number}  $colums    - Colums
 * @param  {Number}  $maxColums - Max Colums
 *
 * @returns {Number}            - Percentage Value
 */
@function grid-size($colums, $maxColums) {
  // Clean up
  $colums: strip-units($colums);
  $maxColums: strip-units($maxColums);

  // Clamp the Number
  $colums: clamp($colums, 0, $maxColums);

  @return percentage($colums / $maxColums);
}

/**
 * Setup the Grid Size in Steps based on the Breakpoints
 *
 * @access private
 */
@mixin grid-stepper() {
  $list: ();

  // Move Values in a list
  @each $name, $entry in $kittn-breakpoint-map {
    @if map-get($entry, layout) == true {
      $list: append($list, map-get($entry,size), comma);
    }
  }

  // Clean up Duplicates
  $list: sl-remove-duplicates($list);

  // Sort the List
  @if $kittn-mobile-first != true {
    $list: sl-reverse($list);
  }

  // Set the Start Width
  width: nth($list,1);

  // Build the Stepped Width
  @for $i from 2 through length($list) {
    @media screen and (if($kittn-mobile-first, min-width, max-width): nth($list,$i)) {
      width: nth($list,$i);
    }
  }
}


/**
 * Generate the Page Container, Size and Float Direction
 *
 * @param {map}  $container - Setup Vars
 *                            :width [list]
 *                              => The Max and Min Width of the container.
 *                              => One Value only the Container is static
 *                            :pos [value]
 *                              => (values: center | left | right) The Position of the Container,
 *                              => default is centered container
 *                            :gutter [number]
 *                              => The Size of the Outer Gutter - only active with $pos left or right
 *                            :spacing [number]
 *                              => Side Padding of the Container
 *                            :static-ie [boolean]
 *                              => When is set on 'true' IE8 get a static Container
 */
@mixin grid-container($container) {

  // Default Container Setup
  $container: map-merge((
    width: 320 1180,
    position: center,
    gutter: 0,
    spacing: 10,
    static-ie: false
  ),$container);

  // Position for the Container
  @if map-get($container, position) == left {
    // left positioned
    @if map-get($container, gutter) > 0 {
      margin-left: unit-check(map-get($container, gutter));
    }

  } @else if map-get($container, position) == right {
    // right positioned
    float: right;
    @if map-get($container, gutter) > 0 {
      margin-right: unit-check(map-get($container, gutter));
    }

  } @else {
    // centered
    margin-left: auto;
    margin-right: auto;
  }

  // When width == false write no width values
  @if map-get($container, width) != false {

    // Include the Size of the Container
    @if length(map-get($container,width)) > 2 {
      @warn 'To many Values for "width". Reduce to max two Values.';

    } @else if length(map-get($container, width)) == 2 {
      $width-val-1: unit-check(nth(map-get($container, width),1));
      $width-val-2: unit-check(nth(map-get($container, width),2));

      // Check the Values
      @if $width-val-1 == $width-val-2 {
        width: $width-val-1 + 0px;

      } @else {
        // Sort the Values
        width: 100%;
        min-width: if($width-val-1 < $width-val-2, $width-val-1, $width-val-2);
        max-width: if($width-val-1 < $width-val-2, $width-val-2, $width-val-1);

      }
    } @else {
      // With only one width Value, the outer container is static for all Browsers
      width: unit-check(map-get($container, width));
    }
  }

  // Make the Container non-fluid for IE when activated
  @if map-get($container, static-ie) != false {
    .ie8 & {

      // When the Base the base width are two values, overwrite this with ie8
      @if length(map-get($container,width)) > 1 {
        width: 100%;

        @if map-get($container, static-ie) > 0 {
          min-width: unit-check(map-get($container, static-ie));
          max-width: unit-check(map-get($container, static-ie));

        } @else {
          // When the Size is to low (zero), Sass use the biggest width for establish the Static width
          min-width: if($width-val-1 < $width-val-2, $width-val-2, $width-val-1);
          max-width: if($width-val-1 < $width-val-2, $width-val-2, $width-val-1);

        }
      } @else {
        width: unit-check(map-get($container, static-ie));
      }
    }
  }

  // Include Padding of the Container
  @if map-get($container, spacing) > 0 {
    padding-left: unit-check(map-get($container, spacing));
    padding-right: unit-check(map-get($container, spacing));
  }
}

/**
 * Build the outer Container that hold the Grid-Columns
 *
 * @param {map}  $row - Setup Vars
 *                      :spacing [number]
 *                        => To reset the margin off a nested rows.
 *                        => Set it to the Colum Guttersize.
 *                      :layout [value]
 *                        => The type from the Layout
 *                        => values: inline | table | flex | block (default)
 *                      :classname [string]
 *                        => The Classname off the nested rows
 *                      :valign [string]
 *                        => Vertical Align
 *                        => values: top (default), bottom, baseline, middle
 *                      :align [value]
 *                        => Horizontal align
 *                        => values: justify | center | right | left (default)
 */
@mixin grid-row($row) {

  // Default Row Setup
  $row: map-merge((
    spacing: 10,
    layout: block,
    classname: row,
    valign: top,
    align: left
  ),$row);

  // Setup posible Vertical Align Values
  $valign-values: top, bottom, baseline, middle;

  // Check if the Valign Values are posible
  @if index($valign-values, map-get($row,valign)) {

    // Setup the horizontal Align for the inner Colums
    @if map-get($row, align) == justify {
      &:after {
        content: '';
        display: inline-block;
        width: 100%;
      }
    } @else if map-get($row, align) == center {
      text-align: center;

    } @else if map-get($row, align) == right {
      text-align: right;
    }

    // Setup the Layout
    @if map-get($row, layout) == inline {
      vertical-align: map-get($row,valign);
      font-size: 0.1px;

    } @else if map-get($row, layout) == table {
      display: table;
      width: 100%;

    } @else if map-get($row, layout) == flex {
      display: flex;

    } @else {
      @include clearfix;
      .#{map-get($row, classname)} {
        margin-left: 0 - unit-check(map-get($row, spacing));
        margin-right: 0 - unit-check(map-get($row, spacing));

      }
    }
  } @else {
    @warn 'The Valign Value "#{map-get($row,valign)}" is not posible!';
  }
}

/**
 * Build the Base Style for all Colums. Include the Mixin in your Colum Class
 *
 * @param {map}  $colums - Setup Vars
 *                         :spacing [number]
 *                           => The Sidespacing off every Colum
 *                         :layout [value]
 *                           => The type from the Layout
 *                           => values: inline | table | flex | block (default)
 *                         :extras [boolean]
 *                           => For include additional classes for the colums
 *                         :valign [string]
 *                           => Vertical Align
 *                           => values: top (default), bottom, baseline, middle
 *                         :align [value]
 *                           => Horizontal align
 *                           => values: justify | center | right | left (default)
 */
@mixin grid-colum($colums) {

  // Default Setup for Columns
  $colums: map-merge((
    spacing: 10,
    layout: block,
    extras: false,
    valign: top ,
    align: left
  ),$colums);

  // Setup posible Vertical Align Values
  $valign-values: top, bottom, baseline, middle;
  $align-values: left, right, center;

  // Set the Colum Spacing to establish the Colum Gutter
  @if map-get($colums,spacing) > 0 {
    padding-left: unit-check(map-get($colums,spacing));
    padding-right: unit-check(map-get($colums,spacing));
  }

  // Include Extra Classes for the Colums
  @if map-get($colums,extras) != false {
    min-height: 1px;

    &#{$kittn-bem-modifier-sign}collapse {
      padding-left: 0;
      padding-right: 0;
    }

    @if map-get($colums,layout) == block {
      &#{$kittn-bem-modifier-sign}left {
        float: left !important;
      }

      &#{$kittn-bem-modifier-sign}right {
        float: right !important;
      }

      &#{$kittn-bem-modifier-sign}center {
        float: none !important;
        margin-left: auto;
        margin-right: auto;
      }
    }
  }

  // Setup the Colum Layout
  @if map-get($colums,layout) == inline {
    // Style the Inline-Block Layout
    display: inline-block;
    letter-spacing: normal;
    word-spacing: normal;
    white-space: normal;

    // Check if the Valign Value is available
    @if index($valign-values, map-get($colums,valign)) {
      vertical-align: map-get($colums,valign);
    } @else {
      @warn 'The Valign Value "#{map-get($colums,valign)}" is not posible!';
    }

    // Check if the Align Value is available
    @if index($align-values, map-get($colums,align)) {
      text-align: map-get($colums,align);
    } @else {
      @warn 'The Align Value "#{map-get($colums,align)}" is not posible!';
    }

  } @else if map-get($colums,layout) == table {
    // Style the Table Layout
    display: table-cell;

    // Check if the Valign Value is available
    @if index($valign-values, map-get($colums,valign)) {
      vertical-align: map-get($colums,valign);
    } @else {
      @warn 'The Valign Value "#{map-get($colums,valign)}" is not posible!';
    }

  } @else if map-get($colums,layout) == flex {
    // Style for the Flexbox Layout

  } @else if map-get($colums,layout) == none {
    // Empty when none

  } @else {
    // Style for the Block layout
    display: block;

    @if map-get($colums,layout) == right {
      float: right;
      &:last-child {
        float: left;
      }
    } @else if map-get($colums,align) == center {
      margin: 0 auto
    } @else if map-get($colums,align) == leftleft {
      float: left;
    } @else if map-get($colums,align) == rightright {
      float: right;
    } @else {
      float: left;
      &:last-child {
        float: right;
      }
    }
  }
}

/**
 * Generate a Grid Colum Size
 *
 * @param {map}  $grid - Setup Vars
 *                       :size [number]
 *                         => The targeted Columsize
 *                       :max [number]
 *                         => The Max available columssizes. Default are 12 Colums per row
 *                       :flex [boolean]
 *                         => Flexbox Option - when active it uses only the $size
 */
@mixin grid-size($grid) {

  // Setup Default Vars
  $grid: map-merge((
    size: 1,
    max: 12,
    flex: false
  ),$grid);

  // Cleanup Max
  $m: strip-units(map-get($grid,max));

  // Cleanup Size
  $s: clamp(strip-units(map-get($grid,size)), 0, $m);

  // Check if Flexbox is active
  @if map-get($grid,flex) == false {
    width: grid-size($s, $m);

  } @else {
    // Generate the Flexbox Width
    flex: $s;
  }
}

/**
 * Generate a Pixel Based Grid Colums
 *
 * @param {map}  $grid - Setup Vars
 *                       :size [number]
 *                         => The targeted Columsize
 *                       :max [number]
 *                         => The Max available columssizes. Default are 12 Colums per row
 *                       :margin [number]
 *                         => Margin on the left and right side
 *                       :space [number]
 *                         => Max Width in Px from the outer Container
 */
@mixin pixel-grid($grid) {

  // Default Setup
  $grid: map-merge((
    size: 1,
    max: 12,
    margin: 10,
    space: 1180
  ),$grid);

  // Cleanup Max
  $m: strip-units(map-get($grid,max));

  // Cleanup Size
  $s: clamp(strip-units(map-get($grid,size)), 0, $m);

  // Cleanup Margin
  $g: strip-units(map-get($grid,margin)) * 2;

  // Calculate the Width
  @if $s > 0 {
    width: strip-units($s) * (strip-units(map-get($grid,space)) / $m) - $g + 0px;

    // Setup Margin
    @if map-get($grid,margin) > 0 {
      margin-left: strip-units(map-get($grid,margin)) + 0px;
      margin-right: strip-units(map-get($grid,margin)) + 0px;
    }

  } @else {
    width: strip-units($s) * (strip-units(map-get($grid,space)) / $m) + 0px;
  }
}

/**
 * Generate all Colum Sizes, it can be also preselected
 *
 * @param {map}  $generator - Setup Vars
 *                            :colums [number]
 *                              => Maximum Colums
 *                            :select [boolean|list]
 *                              => Include a List with the Sizes that you want.
 *                              => Duplicate will be removed
 *                            :name [boolean|string]
 *                              => Classname when the Mixin is not nested in a class.
 *                            :extend [boolean|string]
 *                              => Connect the generated classes with a other class.
 */
@mixin grid-generator($generator) {

  // Setup Default Vars
  $generator: map-merge((
    colums: 12,
    select: false,
    name: false,
    extend: false
  ),$generator);


  @if map-get($generator, select) == false {
    // Generate a whole List off Colum Size Classes
    @for $i from 1 through strip-units(map-get($generator,colums)) {

      // Use outer Classes or free defined selectors
      @if map-get($generator,name) == false {
        &#{$kittn-bem-modifier-sign}#{$i} {
          @include grid-size((
            size: $i,
            max: strip-units(map-get($generator,colums))
          ));

          // Connect the Classes with other Classes
          @if map-get($generator, extend) != false {
            @extend #{map-get($generator, extend)};
          }
        }

      } @else {
        #{map-get($generator,name)}#{$kittn-bem-modifier-sign}#{$i} {
          @include grid-size((
            size: $i,
            max: strip-units(map-get($generator,colums))
          ));

          // Connect the Classes with other Classes
          @if map-get($generator, extend) != false {
            @extend #{map-get($generator, extend)};
          }
        }
      }
    }

  } @else {
    // Generate a List with preselected colum size classes
    // Clean Up the List
    $clean-list: sl-remove-duplicates(sl-sort(map-get($generator,select)));

    // The duration of the Loop
    $loop-length: length($clean-list);

    // Connect the Classes
    // Build a individual Loop
    @for $i from 1 through $loop-length {
      // Dont Generate when the Numbers are bigger than maxColums and lower than 1
      @if (nth(map-get($generator,select), $i)) <= map-get($generator,colums) and (nth(map-get($generator,select), $i)) >= 1 {

        // Use outer Classes or free defined selectors
        @if map-get($generator,name) == false {
          &#{$kittn-bem-modifier-sign}#{nth($clean-list, $i)} {
            @include grid-size((
              size: nth($clean-list, $i),
              max: strip-units(map-get($generator,colums))
            ));

            // Connect the Classes with other Classes
            @if map-get($generator, extend) != false {
              @extend #{map-get($generator, extend)};
            }
          }
        } @else {
          #{map-get($generator,name)}#{$kittn-bem-modifier-sign}#{nth($clean-list, $i)} {
            @include grid-size((
              size: nth($clean-list, $i),
              max: strip-units(map-get($generator,colums))
            ));

            // Connect the Classes with other Classes
            @if map-get($generator, extend) != false {
              @extend #{map-get($generator, extend)};
            }
          }
        }
      }
    }
  }
}

/**
 * Scales down a used Grid
 *
 * @param {map}  $devide - Setup Vars
 *                         :colums [number]
 *                           => Maximum Colums
 *                         :name [boolean|string]
 *                           => Classname when the Mixin is not nested in a class.
 *                         :devide [number]
 *                           => Devide the Grid and rearange the sizes
 */
@mixin grid-devide($devide) {

  // Setup Default Vars
  $devide: map-merge((
    colums: 12,
    name: '.width',
    devide: 2
  ),$devide);

  // Check if the Devider is useable
  $check: map-get($devide,colums) / map-get($devide,devide);

  @if round($check) == $check {

    // Reduce the Loop
    $count: map-get($devide,colums) / map-get($devide,devide);

    @for $i from 1 through $count {
      @for $i1 from 1 through map-get($devide,devide) {

        // Use outer Classes or free defined selectors
        @if map-get($devide,name) == false {
          #{map-get($devide,name)}#{$kittn-bem-modifier-sign}#{$i + ($count * ($i1 - 1))} {
            @include grid-size((
              size: $i,
              max: $count,
            ));
          }

        } @else {
          &#{$kittn-bem-modifier-sign}#{$i + ($count * ($i1 - 1))} {
            @include grid-size((
              size: $i,
              max: $count,
            ));
          }
        }
      }
    }
  } @else {
    @warn 'Please check your Devider Number.';
  }
}

/**
 * Generate the Offset Width for a Colum
 *
 * @param {map}  $offset - Setup Vars
 *                         :size [number]
 *                           => The required colum size
 *                         :max [number]
 *                           => Max Colums
 *                         :direction [value]
 *                           => The Direction off the Offset (default: left)
 */
@mixin grid-offset($offset) {

  // Setup Default Vars
  $offset: map-merge((
    size: 1,
    max: 12,
    direction: left
  ),$offset);

  // Cleanup Max
  $m: strip-units(map-get($offset,max));
  // Cleanup Colums
  $c: clamp(strip-units(map-get($offset,size)), 0, $m);

  @if map-get($offset,direction) == left {
    margin-left: grid-size($c,$m);
  } @else {
    margin-right: grid-size($c,$m);
  }
}

/**
 * Generate a set off Offsets (left and right)
 *
 * @param {map}  $offset - Setup Vars
 *                         :max [number]
 *                           => The Maximum Colums (default: 12)
 *                         :name [bool|string]
 *                           => You can include a classname (non nested mixin), default name is '.offset',
 *                           => Otherwise set it to 'false', the parent Classname will be used as base name
 */
@mixin grid-offset-generator($offset) {

  // Setup Default Vars
  $offset: map-merge((
    max: 12,
    name: '.offset'
  ),$offset);

  // Cleanup Max
  $m: strip-units(map-get($offset,max));

  // Generate offset Classes
  @for $i from 1 through ($m - 1) {
    // When 'name' is false use the Parent Class
    @if map-get($offset, name) == false {
      &-left#{$kittn-bem-modifier-sign}#{$i} {
        @include grid-offset((
          size: $i,
          max: $m
        ));
      }
      &-right#{$kittn-bem-modifier-sign}#{$i} {
        @include grid-offset((
          size: $i,
          max: $m,
          direction: right
        ));
      }
    } @else {
      #{map-get($offset,name)}-left#{$kittn-bem-modifier-sign}#{$i} {
        @include grid-offset((
          size: $i,
          max: $m
        ));
      }
      #{map-get($offset,name)}-right#{$kittn-bem-modifier-sign}#{$i} {
        @include grid-offset((
          size: $i,
          max: $m,
          direction: right
        ));
      }
    }
  }
}

/**
 * Move a Colum with Position:Relative to left or right -
 * Elements can move out off the container or it change the order
 *
 * @param {map}  $pushpull - Setup Vars
 *                           :size [number]
 *                             => The required colum size
 *                           :max [number]
 *                             => Max Colums
 *                           :direction [value]
 *                             => The Direction off the Offset (default: push)
 *                             => values: push | pull
 *                           :extend [bool]
 *                             => With 'true' the class will connected with a other class.
 */
@mixin grid-pushpull($pushpull) {

  // Setup Default Vars
  $pushpull: map-merge((
    size: 1,
    max: 12,
    direction: push,
    extend: false
  ),$pushpull);

  // Cleanup Max
  $m: strip-units(map-get($pushpull,max));

  // Cleanup Colums
  $c: clamp(strip-units(map-get($pushpull,size)), 0, $m);

  @if map-get($pushpull,extend) == false {
    position: relative;

  } @else {
    @extend #{map-get($pushpull,extend)};
  }

  @if map-get($pushpull, direction) == pull {
    right: grid-size($c, $m);

  } @else {
    left: grid-size($c, $m);
  }
}

/**
 * Generate the Push&Pull Classes
 *
 * @param {map}  $pushpull - Setup Vars
 *                           :max [number]
 *                             => The Maximum Colums (default: 12)
 *                           :name [bool|string]
 *                             => You can include a classname (non nested mixin), default name is '.move',
 *                             => Otherwise set it to 'false', the parent Classname will be used as base name
 *                           :extend [bool]
 *                             => With 'true' the class will connected with a other class.
 */
@mixin grid-pushpull-generator($pushpull) {

  $pushpull: map-merge((
    max: 12,
    name: '.move',
    extend: false
  ),$pushpull);

  // Cleanup Max
  $m: strip-units(map-get($pushpull,max));

  // Generate the Push&Pull Classes
  @for $i from 1 through ($m - 1) {
    // When 'name' is false use the Parent Class
    @if map-get($pushpull, name) == false {
      &-push#{$kittn-bem-modifier-sign}#{$i} {
        @include grid-pushpull((
          size: $i,
          max: $m,
          extend: map-get($pushpull,extend)
        ));
      }
      &-pull#{$kittn-bem-modifier-sign}#{$i} {
        @include grid-pushpull((
          size: $i,
          max: $m,
          direction: pull,
          extend: map-get($pushpull,extend)
        ));
      }
    } @else {
      #{map-get($pushpull,name)}-push#{$kittn-bem-modifier-sign}#{$i} {
        @include grid-pushpull((
          size: $i,
          max: $m,
          extend: map-get($pushpull,extend)
        ));
      }
      #{map-get($pushpull,name)}-pull#{$kittn-bem-modifier-sign}#{$i} {
        @include grid-pushpull((
          size: $i,
          max: $m,
          direction: pull,
          extend: map-get($pushpull,extend)
        ));
      }
    }
  }
}

/**
 * Normalize all Grid Classes
 *
 * @param {map}  $normalize - Setup Vars
 *                            :name [string]
 *                              => Desired Name off the Selector that need to remodified
 *                            :option [value]
 *                              => The style Type
 *                              => values: blockgrid (default), inlinetable, offset, pushpull
 *                            :extend [bool]
 *                              => With 'true' the class will connected with a other class.
 */
@mixin grid-normalizer($normalize) {

  // Setup Default Vars
  $normalize: map-merge((
    name: false,
    option: blockgrid,
    important: false
  ),$normalize);

  // Set internal default var
  $i: null;

  // Important Check
  @if map-get($normalize,important) == true {
    $i: !important
  } @else {
    $i: null
  }

  @if map-get($normalize,name) != false {

    @if map-get($normalize,option) == pushpull {
      [class^="#{map-get($normalize,name)}-push#{$kittn-bem-modifier-sign}"],
      [class*=" #{map-get($normalize,name)}-push#{$kittn-bem-modifier-sign}"] {
        left: 0 $i;
      }

      [class^="#{map-get($normalize,name)}-pull#{$kittn-bem-modifier-sign}"],
      [class*=" #{map-get($normalize,name)}-pull#{$kittn-bem-modifier-sign}"] {
        right: 0 $i;
      }

    } @else if map-get($normalize,option) == offset {
      [class^="#{map-get($normalize,name)}-right#{$kittn-bem-modifier-sign}"],
      [class*=" #{map-get($normalize,name)}-right#{$kittn-bem-modifier-sign}"] {
        margin-right: 0 $i;
      }

      [class^="#{map-get($normalize,name)}-left#{$kittn-bem-modifier-sign}"],
      [class*=" #{map-get($normalize,name)}-left#{$kittn-bem-modifier-sign}"] {
        margin-left: 0 $i;
      }

    } @else if map-get($normalize,option) == inlinetable {
      [class^="#{map-get($normalize,name)}"],
      [class*="#{map-get($normalize,name)}"] {
        display: block $i;
        width: 100% $i;
      }

    } @else {
      // Reset the Base Grid
      [class^="#{map-get($normalize,name)}"],
      [class*="#{map-get($normalize,name)}"] {
        float: none $i;
        width: 100% $i;
      }
    }

  } @else {
    @warn 'Please set the Name for the normalization'
  }
}
